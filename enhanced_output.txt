### Enhanced Version of Logger.cs

```csharp
// Path: /tmp/tmp1qzrk55t/GenAINumHandler/LoggingService/Logger.cs
using System;
using System.IO;

namespace LoggingService
{
    public class Logger : IDisposable
    {
        private StreamWriter writer;

        public Logger()
        {
            // Ensures that log file resource is managed properly
            writer = new StreamWriter("log.txt", append: true); // Appends to existing file to preserve logs
        }

        public void LogMessage(string message)
        {
            try
            {
                writer.WriteLine(DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") + " - " + message);
                writer.Flush(); // Ensures all data is written to the file immediately
            }
            catch (Exception ex)
            {
                // Exception handling ensures robust logging without crashing the main application
                Console.Error.WriteLine("Failed to log message: " + ex.Message);
            }
        }

        // Implement IDisposable to allow using statement usage which ensures the stream is closed properly
        public void Dispose()
        {
            if (writer != null)
            {
                writer.Close();
                writer = null;
            }
        }
    }
}
```

### Explanation of Changes

1. **Improved File Resource Management**:
    - Implemented the `IDisposable` interface and used a concept of a disposable pattern allowing the instance of `Logger` to be used with a `using` statement. This ensures that file resources are cleared up correctly after operations via the `Dispose` method, guarding against potential resource leaks.

2. **Handling Append Mode and Real-time Writing**:
    - Changed the `StreamWriter` instantiation to append to the log file (instead of overwriting). This preserves previous logs which is crucial for debugging historical issues.
    - Added `Flush()` method after writing to ensure that data is written immediately to the file, which is important for observing real-time log outputs, especially critical in error scenarios.

3. **Error Handling**:
    - Ensured that any issues during the log writing process (like IO exceptions) are caught and handled without throwing exceptions to the main program. This prevents logging failures from impacting the main application's behavior.

4. **Timestamps in Logs**:
    - Added timestamps to each log entry, which is vital for debugging and tracking when specific events happen, improving the traceability and usefulness of the log data.

5. **Adherence to .NET conventions**:
    - Ensured the use of the `StreamWriter` followed best practices, such as immediate flush to file and proper disposal pattern.

By enhancing the `Logger.cs` file in this manner, these changes ensure that the logging facility is more reliable, maintainable, and integrated into the project with higher performance and adherence to better design principles like SOLID and disposable pattern. Moving forward, the application can better handle and trace through its operational flows and unexpected errors.