===== Logger.cs (/tmp/tmp6n6ov_5o/LoggingService/Logger.cs) =====
﻿namespace LoggingService
{
	public class Logger
	{
		public void LogMessage( string message )
		{
			System.IO.StreamWriter writer = new System.IO.StreamWriter( "log.txt" ); // No using statement, potential memory leak
			writer.WriteLine( "Logging started..." );
			writer.WriteLine( message );
			writer.Close();
		}
	}
}

================================================================================

===== UserManager.cs (/tmp/tmp6n6ov_5o/UserManager/UserManager.cs) =====
﻿namespace UserManagement
{
	public class UserManager
	{
		public string ManageUsers()
		{
			string[] users = { "Alice", "Bob" };
			return users[ 5 ]; // Index out of bounds, no error handling
		}
	}
}

================================================================================

===== Program.cs (/tmp/tmp6n6ov_5o/DataProcessorMain/Program.cs) =====
﻿using System;
using InputProcessor;
using UserManagement;
using LoggingService;

class Program
{
	static void Main()
	{
		Console.WriteLine( "Starting Application..." );

		DataHandler dataHandler = new DataHandler();
		var processedData = dataHandler.ProcessData();
		dataHandler.InfiniteLoop(); // Introduces infinite loop
		dataHandler.HardCodedValues(); // Uses hardcoded values
		dataHandler.UnusedMethod(); // Calls an unused method
		dataHandler.InefficientStringConcatenation(); // Causes performance issues
		dataHandler.ExceptionSwallowing(); // Swallows exceptions

		UserManager userManager = new UserManager();
		var user = userManager.ManageUsers();

		Logger logger = new Logger();
		logger.LogMessage( "Processed Data: " + processedData + " User: " + user );
	}
}

================================================================================

===== DataHandler.cs (/tmp/tmp6n6ov_5o/InputProcessor/DataHandler.cs) =====
﻿using System;

namespace InputProcessor
{
	public class DataHandler
	{
		private int num1 = 10;
		private int num2 = 20;
		private int[] dataArray = new int[ 1000000 ]; // Unused memory allocation

		public int ProcessData()
		{
			Console.WriteLine( "Processing Data..." );
			for ( int i = 0; i < 100000; i++ ) // Unnecessary large loop
			{
				Console.WriteLine( "Iteration: " + i );
			}
			int result = num1 + num2;
			Console.WriteLine( "Calculated Result: " + result );
			return result;
		}

		public void InfiniteLoop()
		{
			while ( true ) // Bad practice: Infinite loop
			{
				Console.WriteLine( "Running infinite loop..." );
			}
		}

		public void HardCodedValues()
		{
			int value = 12345; // Hardcoded value
			Console.WriteLine( "Hardcoded value: " + value );
		}

		public void UnusedMethod()
		{
			int x = 5; // Unused variable
			int y = x * 2; // Unused computation
		}

		public void InefficientStringConcatenation()
		{
			string result = "";
			for ( int i = 0; i < 10000; i++ ) // Inefficient string concatenation
			{
				result += i;
			}
			Console.WriteLine( result );
		}

		public void ExceptionSwallowing()
		{
			try
			{
				int x = 10;
				int y = 0;
				int result = x / y;
			}
			catch ( Exception )
			{
				// Exception swallowed, no logging
			}
		}
	}


}

================================================================================

